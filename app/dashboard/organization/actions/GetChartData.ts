// app/dashboard/organization/actions/GetChartData.ts
'use server';

import prisma from '@/app/lib/db';

type ChartDataResult<T> = {
  success: boolean;
  data?: T;
  error?: string;
};

// üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Organization Category Chart
export async function getOrganizationCategoryChartData(): Promise<ChartDataResult<Array<{ name: string; value: number }>>> {
  try {
    const categoryStats = await prisma.organization.groupBy({
      by: ['organizationCategoryId'],
      _count: {
        organizationCategoryId: true
      },
      orderBy: {
        _count: {
          organizationCategoryId: 'desc'
        }
      }
    });

    // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ OrganizationCategory
    const organizationCategories = await prisma.organizationCategory.findMany({
      select: {
        id: true,
        name: true
      }
    });

    const chartData = categoryStats.map(item => {
      const category = organizationCategories.find(cat => cat.id === item.organizationCategoryId);
      return {
        name: category?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
        value: item._count.organizationCategoryId
      };
    });

    return {
      success: true,
      data: chartData
    };
  } catch (error) {
    console.error('Error fetching organization category chart data:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Failed to fetch organization category data'
    };
  }
}

// üó∫Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Province Distribution Chart
export async function getProvinceDistributionChartData(): Promise<ChartDataResult<Array<{ name: string; value: number }>>> {
  try {
    const provinceStats = await prisma.organization.groupBy({
      by: ['province'],
      _count: {
        province: true
      },
      orderBy: {
        _count: {
          province: 'desc'
        }
      }
    });

    const chartData = provinceStats.map(item => ({
      name: item.province,
      value: item._count.province
    }));

    return {
      success: true,
      data: chartData
    };
  } catch (error) {
    console.error('Error fetching province distribution chart data:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Failed to fetch province distribution data'
    };
  }
}

// üë• ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Signers Chart
export async function getSignersChartData(): Promise<ChartDataResult<Array<{ range: string; count: number; totalSigners: number }>>> {
  try {
    const signersData = await prisma.organization.findMany({
      select: {
        numberOfSigners: true
      },
      where: {
        numberOfSigners: {
          gt: 0
        }
      }
    });

    // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏•‡∏á‡∏ô‡∏≤‡∏°
    const signersRanges: { [key: string]: { count: number; total: number } } = {
      '1-5 ‡∏Ñ‡∏ô': { count: 0, total: 0 },
      '6-10 ‡∏Ñ‡∏ô': { count: 0, total: 0 },
      '11-20 ‡∏Ñ‡∏ô': { count: 0, total: 0 },
      '21-50 ‡∏Ñ‡∏ô': { count: 0, total: 0 },
      '51-100 ‡∏Ñ‡∏ô': { count: 0, total: 0 },
      '‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 100 ‡∏Ñ‡∏ô': { count: 0, total: 0 }
    };

    signersData.forEach(record => {
      if (record.numberOfSigners) {
        const signers = record.numberOfSigners;
        if (signers >= 1 && signers <= 5) {
          signersRanges['1-5 ‡∏Ñ‡∏ô'].count++;
          signersRanges['1-5 ‡∏Ñ‡∏ô'].total += signers;
        } else if (signers >= 6 && signers <= 10) {
          signersRanges['6-10 ‡∏Ñ‡∏ô'].count++;
          signersRanges['6-10 ‡∏Ñ‡∏ô'].total += signers;
        } else if (signers >= 11 && signers <= 20) {
          signersRanges['11-20 ‡∏Ñ‡∏ô'].count++;
          signersRanges['11-20 ‡∏Ñ‡∏ô'].total += signers;
        } else if (signers >= 21 && signers <= 50) {
          signersRanges['21-50 ‡∏Ñ‡∏ô'].count++;
          signersRanges['21-50 ‡∏Ñ‡∏ô'].total += signers;
        } else if (signers >= 51 && signers <= 100) {
          signersRanges['51-100 ‡∏Ñ‡∏ô'].count++;
          signersRanges['51-100 ‡∏Ñ‡∏ô'].total += signers;
        } else if (signers > 100) {
          signersRanges['‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 100 ‡∏Ñ‡∏ô'].count++;
          signersRanges['‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 100 ‡∏Ñ‡∏ô'].total += signers;
        }
      }
    });

    const chartData = Object.entries(signersRanges).map(([range, data]) => ({
      range,
      count: data.count,
      totalSigners: data.total
    }));

    return {
      success: true,
      data: chartData
    };
  } catch (error) {
    console.error('Error fetching signers chart data:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Failed to fetch signers data'
    };
  }
}

// üìà ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Submission Trend Chart
export async function getSubmissionTrendChartData(): Promise<ChartDataResult<Array<{ date: string; count: number }>>> {
  try {
    const submissionData = await prisma.organization.findMany({
      select: {
        createdAt: true
      },
      orderBy: {
        createdAt: 'asc'
      }
    });

    // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô (30 ‡∏ß‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á)
    const last30Days = Array.from({ length: 30 }, (_, i) => {
      const date = new Date();
      date.setDate(date.getDate() - (29 - i));
      return date.toISOString().split('T')[0];
    });

    const trendData = last30Days.map(date => {
      const count = submissionData.filter(item => 
        item.createdAt.toISOString().split('T')[0] === date
      ).length;
      return { date, count };
    });

    return {
      success: true,
      data: trendData
    };
  } catch (error) {
    console.error('Error fetching submission trend chart data:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Failed to fetch submission trend data'
    };
  }
}

// üñºÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Image Completion Chart
export async function getImageCompletionChartData(): Promise<ChartDataResult<Array<{ name: string; value: number }>>> {
  try {
    const allOrganizations = await prisma.organization.findMany({
      select: {
        image1: true,
        image2: true,
        image3: true,
        image4: true,
        image5: true
      }
    });

    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    const imageCount: { [key: string]: number } = {
      '‡∏°‡∏µ‡∏£‡∏π‡∏õ 2 ‡∏£‡∏π‡∏õ (‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î)': 0,
      '‡∏°‡∏µ‡∏£‡∏π‡∏õ 3 ‡∏£‡∏π‡∏õ': 0,
      '‡∏°‡∏µ‡∏£‡∏π‡∏õ 4 ‡∏£‡∏π‡∏õ': 0,
      '‡∏°‡∏µ‡∏£‡∏π‡∏õ 5 ‡∏£‡∏π‡∏õ (‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)': 0,
      '‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î': 0
    };

    allOrganizations.forEach(org => {
      const images = [org.image1, org.image2, org.image3, org.image4, org.image5];
      const validImages = images.filter(img => img !== null && img !== '').length;
      
      if (validImages < 2) {
        imageCount['‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î']++;
      } else if (validImages === 2) {
        imageCount['‡∏°‡∏µ‡∏£‡∏π‡∏õ 2 ‡∏£‡∏π‡∏õ (‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î)']++;
      } else if (validImages === 3) {
        imageCount['‡∏°‡∏µ‡∏£‡∏π‡∏õ 3 ‡∏£‡∏π‡∏õ']++;
      } else if (validImages === 4) {
        imageCount['‡∏°‡∏µ‡∏£‡∏π‡∏õ 4 ‡∏£‡∏π‡∏õ']++;
      } else if (validImages === 5) {
        imageCount['‡∏°‡∏µ‡∏£‡∏π‡∏õ 5 ‡∏£‡∏π‡∏õ (‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)']++;
      }
    });

    const chartData = Object.entries(imageCount)
      .map(([name, value]) => ({ name, value }))
      .filter(item => item.value > 0);

    return {
      success: true,
      data: chartData
    };
  } catch (error) {
    console.error('Error fetching image completion chart data:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Failed to fetch image completion data'
    };
  }
}

// üìÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Monthly Submission Chart
export async function getMonthlySubmissionChartData(): Promise<ChartDataResult<Array<{ month: string; count: number }>>> {
  try {
    const monthlyData = await prisma.organization.findMany({
      select: {
        createdAt: true
      },
      orderBy: {
        createdAt: 'asc'
      }
    });

    // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    const monthlyCount: { [key: string]: number } = {};

    monthlyData.forEach(record => {
      const monthKey = record.createdAt.toLocaleDateString('th-TH', { 
        year: 'numeric', 
        month: 'long' 
      });
      monthlyCount[monthKey] = (monthlyCount[monthKey] || 0) + 1;
    });

    const chartData = Object.entries(monthlyCount).map(([month, count]) => ({
      month,
      count
    }));

    return {
      success: true,
      data: chartData
    };
  } catch (error) {
    console.error('Error fetching monthly submission chart data:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Failed to fetch monthly submission data'
    };
  }
}

// üèÜ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Top 10 Provinces Chart
export async function getTop10ProvincesChartData(): Promise<ChartDataResult<Array<{ name: string; value: number }>>> {
  try {
    const provinceStats = await prisma.organization.groupBy({
      by: ['province'],
      _count: {
        province: true
      },
      orderBy: {
        _count: {
          province: 'desc'
        }
      },
      take: 10
    });

    const chartData = provinceStats.map(item => ({
      name: item.province,
      value: item._count.province
    }));

    return {
      success: true,
      data: chartData
    };
  } catch (error) {
    console.error('Error fetching top 10 provinces chart data:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Failed to fetch top 10 provinces data'
    };
  }
}

// üó∫Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Organization Type Chart (‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£)
export async function getOrganizationTypeChartData(): Promise<ChartDataResult<Array<{ name: string; value: number }>>> {
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÉ‡∏ô JavaScript ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Prisma
    const allOrganizations = await prisma.organization.findMany({
      select: {
        type: true
      }
    });

    // ‡∏ô‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
    const typeCount: { [key: string]: number } = {};
    
    allOrganizations.forEach(org => {
      if (org.type && org.type.trim() !== '') {
        typeCount[org.type] = (typeCount[org.type] || 0) + 1;
      }
    });

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    const typeMapping = {
      'PUBLIC': '‡∏†‡∏≤‡∏Ñ‡∏£‡∏±‡∏ê',
      'PRIVATE': '‡πÄ‡∏≠‡∏Å‡∏ä‡∏ô',
      'NGO': '‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏≠‡∏Å‡∏ä‡∏ô',
      'ACADEMIC': '‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤'
    };

    const chartData = Object.entries(typeCount)
      .map(([type, count]) => ({
        name: typeMapping[type as keyof typeof typeMapping] || type || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
        value: count
      }))
      .sort((a, b) => b.value - a.value);

    return {
      success: true,
      data: chartData
    };
  } catch (error) {
    console.error('Error fetching organization type chart data:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Failed to fetch organization type data'
    };
  }
}

// üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Dashboard
export async function getOrganizationDashboardSummary(): Promise<ChartDataResult<{
  totalOrganizations: number;
  totalProvinces: number;
  totalCategories: number;
  totalSigners: number;
  avgSignersPerOrganization: number;
  organizationsWithCompleteImages: number;
  recentOrganizations: number;
}>> {
  try {
    const sevenDaysAgo = new Date();
    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);

    const [
      totalOrganizations,
      provinceCount,
      categoryCount,
      signersData,
      imageData,
      recentOrganizations
    ] = await Promise.all([
      prisma.organization.count(),
      prisma.organization.groupBy({
        by: ['province'],
        _count: { province: true }
      }),
      prisma.organizationCategory.count({
        where: { isActive: true }
      }),
      prisma.organization.findMany({
        select: { numberOfSigners: true },
        where: { 
          numberOfSigners: { 
            gt: 0 
          } 
        }
      }),
      prisma.organization.findMany({
        select: {
          image1: true,
          image2: true,
          image3: true,
          image4: true,
          image5: true
        }
      }),
      prisma.organization.count({
        where: {
          createdAt: {
            gte: sevenDaysAgo
          }
        }
      })
    ]);

    const totalProvinces = provinceCount.length;
    const signers = signersData.map(item => item.numberOfSigners).filter(s => s !== null) as number[];
    const totalSigners = signers.reduce((sum, count) => sum + count, 0);
    const avgSignersPerOrganization = signers.length > 0 ? Math.round(totalSigners / signers.length) : 0;

    // ‡∏ô‡∏±‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏ö (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏£‡∏π‡∏õ)
    const organizationsWithCompleteImages = imageData.filter(org => {
      const images = [org.image1, org.image2, org.image3, org.image4, org.image5];
      const validImages = images.filter(img => img !== null && img !== '').length;
      return validImages >= 2;
    }).length;

    return {
      success: true,
      data: {
        totalOrganizations,
        totalProvinces,
        totalCategories: categoryCount,
        totalSigners,
        avgSignersPerOrganization,
        organizationsWithCompleteImages,
        recentOrganizations
      }
    };
  } catch (error) {
    console.error('Error fetching organization dashboard summary:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Failed to fetch organization dashboard summary'
    };
  }
}

// üìû ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Contact Stats Chart (‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠)
export async function getContactStatsChartData(): Promise<ChartDataResult<{
  phoneNumberStats: Array<{ name: string; value: number }>;
  completenessStats: Array<{ name: string; value: number }>;
}>> {
  try {
    const contactData = await prisma.organization.findMany({
      select: {
        phoneNumber: true,
        firstName: true,
        lastName: true,
        addressLine1: true
      }
    });

    // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
    const phoneStats = {
      '‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå': 0,
      '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå': 0
    };

    // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
    const completenessStats = {
      '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô': 0,
      '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô': 0
    };

    contactData.forEach(org => {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
      if (org.phoneNumber && org.phoneNumber.trim() !== '') {
        phoneStats['‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå']++;
      } else {
        phoneStats['‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå']++;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (‡∏ä‡∏∑‡πà‡∏≠, ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•, ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà, ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£)
      const isComplete = org.firstName && org.firstName.trim() !== '' &&
                        org.lastName && org.lastName.trim() !== '' &&
                        org.addressLine1 && org.addressLine1.trim() !== '' &&
                        org.phoneNumber && org.phoneNumber.trim() !== '';

      if (isComplete) {
        completenessStats['‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô']++;
      } else {
        completenessStats['‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô']++;
      }
    });

    const phoneNumberStats = Object.entries(phoneStats).map(([name, value]) => ({ name, value }));
    const completenessStatsArray = Object.entries(completenessStats).map(([name, value]) => ({ name, value }));

    return {
      success: true,
      data: {
        phoneNumberStats,
        completenessStats: completenessStatsArray
      }
    };
  } catch (error) {
    console.error('Error fetching contact stats chart data:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Failed to fetch contact stats data'
    };
  }
}